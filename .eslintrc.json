{
  "extends": [
    "next",
    "plugin:@typescript-eslint/recommended",
    "prettier",
    "plugin:storybook/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint", "prettier"],
  "root": true,
  "rules": {
    "prettier/prettier": [
      "error",
      {
        "tabWidth": 2,
        "semi": true,
        "endOfLine": "auto",
        "singleQuote": false,
        "trailingComma": "es5"
      }
    ],
    "@typescript-eslint/ban-types": "off",
    "@typescript-eslint/no-namespace": "off",
    "array-callback-return": "error",
    "eqeqeq": "error",
    "no-alert": "error",
    "no-return-assign": "error",
    "no-restricted-syntax": [
      "error",
      {
        "selector": "CallExpression[callee.name=watch], MemberExpression[object.name=methods][property.name=watch]",
        "message": "\"watch\" re-render the whole form component. Use hook \"useWatch\" instead."
      },
      {
        "selector": "VariableDeclarator > ObjectPattern > Property[key.name=formState]",
        "message": "\"formState\" re-render the whole form component. Use hook \"useFormState\" instead."
      },
      {
        "selector": "VariableDeclarator[init.callee.name=useFormState][id.type=Identifier]",
        "message": "Use destructuring assignment for \"useFormState\". Example: \"const { isDirty } = useFormState()\". Returned formState is wrapped with Proxy to improve render performance and skip extra computation if specific state is not subscribed, so make sure you deconstruct or read it before render in order to enable the subscription. More info here https://react-hook-form.com/docs/useformstate#rules"
      },
      {
        "selector": "MemberExpression[object.name=control]",
        "message": "Do not access any of the properties inside this object directly. It's for internal usage only. More info here: https://react-hook-form.com/docs/useform/control"
      },
      {
        "selector": "VariableDeclaration[declarations.0.init.callee.name=useForm] ~ VariableDeclaration[declarations.0.init.callee.name=useWatch]",
        "message": "\"useWatch\" in main form component (which use \"useForm\") will re-render the whole form component. Move your useWatch's logic to separate component."
      },
      {
        "selector": "VariableDeclaration[declarations.0.init.callee.name=useForm] ~ VariableDeclaration[declarations.0.init.callee.name=useFieldArray]",
        "message": "\"useFieldArray\" in main form component (which use \"useForm\") will re-render the whole form component. Move your useFieldArray's logic to separate component."
      },
      {
        "selector": "VariableDeclaration[declarations.0.init.callee.name=useForm] ~ VariableDeclaration[declarations.0.init.callee.name=useController]",
        "message": "\"useController\" in main form component (which use \"useForm\") will re-render the whole form component. Move your useController's logic to separate component."
      },
      {
        "selector": "VariableDeclaration[declarations.0.init.callee.name=useForm] ~ VariableDeclaration[declarations.0.init.callee.name=useFormContext]",
        "message": "\"useFormContext\" in main form component (which use \"useForm\") will re-render the whole form component. Move your useFormContext's logic to separate component."
      },
      {
        "selector": "VariableDeclaration[declarations.0.init.callee.name=useForm] ~ VariableDeclaration[declarations.0.init.callee.name=useFormState]",
        "message": "\"useFormState\" in main form component (which use \"useForm\") will re-render the whole form component. Move your useFormState's logic to separate component."
      },
      {
        "selector": "CallExpression[callee.name=useForm][arguments.length=0], CallExpression[callee.name=useForm][arguments.length=1]:not(:has(Property[key.name=defaultValues]))",
        "message": "Pass object with \"defaultValues\" for correct \"formState\" behavior. More info here: https://react-hook-form.com/api/useform/formstate#main"
      },
      {
        "selector": "VariableDeclaration[declarations.0.init.callee.name=useState] ~ ReturnStatement JSXIdentifier[name=Controller]",
        "message": "Don't use \"Controller\" with \"useState\". Move you \"useState\" and another logic to separate component and wrap this component via Controller. Reason: This approach will rise wrong logic for handle input field. Example: \"src/components/form/text-input/form-text-input.tsx\""
      },
      {
        "selector": "VariableDeclaration[declarations.0.init.callee.name=useState] ~ VariableDeclaration[declarations.0.init.callee.name=useController], VariableDeclaration[declarations.0.init.callee.name=useController] ~ VariableDeclaration[declarations.0.init.callee.name=useState]",
        "message": "Don't use \"useController\" with \"useState\". Move you \"useState\" and another logic to separate component and wrap this component into another component with useController. Reason: This approach will rise wrong logic for handle input filed"
      },
      {
        "selector": "CallExpression[callee.name=useForm][arguments.length=1] Property[key.name=defaultValues][value.properties.length=0]",
        "message": "\"defaultValues\" can not be empty object for correct \"formState\" behavior. More info here: https://react-hook-form.com/api/useform/formstate#main"
      },
      {
        "selector": "MemberExpression[object.name=React][property.name=/^use/]",
        "message": "Use hooks without \"React\" prefix. For avoid using both import styles. Example: \"useEffect\" instead of \"React.useEffect\"."
      },
      {
        "selector": "CallExpression[callee.type=MemberExpression][callee.property.name=forEach]:has(AwaitExpression)",
        "message": "Do not use in forEach \"async\" code, because logic will not be awaited. use \"map\" with \"Promise.all\", for example \"await Promise.all(ARRAY_OF_ITEM.map(...))\" or use regular \"for\" loop."
      },
      {
        "selector": "ConditionalExpression[consequent.type=Literal][consequent.value=true][alternate.type=Literal][alternate.value=false]",
        "message": "Do not use \"condition ? true : false\". Simplify \"someVariable === 42 ? true : false \" to \"someVariable === 42\""
      },
      {
        "selector": "JSXElement[openingElement.name.property.name=Provider] JSXElement[openingElement.name.name]",
        "message": "Do not put your regular components inside Context \".Provider\". Create new component, for example ComponentProvider. Put Provider's logic to ComponentProvider. Render \"{children} instead of regular component. Wrap regular component via new ComponentProvider \". Example: \"src/services/auth/auth-provider\""
      },
      {
        "selector": "Property[key.name=/^(padding|margin|paddingLeft|paddingRight|paddingTop|paddingBottom|paddingVertical|marginLeft|marginRight|marginTop|marginBottom|marginVertical)$/][value.type=/^(Literal|UnaryExpression)$/]:not([value.value=\"0 !important\"]):not([value.value=\"0\"]):not([value.value=\"0 auto\"]):not([value.value=\"auto\"])",
        "message": "Use theme.spacing() instead of literal."
      },
      {
        "selector": "CallExpression[callee.name=/^(useQuery|useInfiniteQuery)$/] Property[key.name=queryKey]:not(:has(Identifier[name=key]))",
        "message": "Use key created via createQueryKeys function instead of your solution"
      },
      {
        "selector": "CallExpression[callee.name=refresh]",
        "message": "Do not use refresh() function for update or change result in react-query. Use \"queryClient.resetQueries\" or pass new filter data to queryKey."
      },
      {
        "selector": "ExpressionStatement[expression.callee.object.name=JSON][expression.callee.property.name=parse][expression.arguments.0.callee.object.name=JSON][expression.arguments.0.callee.property.name=stringify]",
        "message": "Do not use JSON.parse(JSON.stringify(...)) for deep copy. Use structuredClone instead."
      },
      {
        "selector": "CallExpression[callee.name=test][arguments.0.value!=/^should/]",
        "message": "\"test\" should start with \"should\""
      }
    ],
    "no-restricted-imports": [
      "error",
      {
        "paths": [
          {
            "name": "@mui/material",
            "message": "Please use \"import ComponentName from '@mui/material/ComponentName'\" instead."
          },
          {
            "name": "@mui/icons-material",
            "message": "Please use \"import IconName from '@mui/icons-material/IconName'\" instead."
          },
          {
            "name": "next/link",
            "message": "Please use \"import Link from \"@/components/link\"\" instead. This is need for \"leave page\" logic"
          }
        ]
      }
    ],
    "import": 0,
    "max-len": 0,
  
    "no-shadow": 0,
    "no-console": 0,
    "comma-dangle": 0,
    "import/no-cycle": 0,
    "react/prop-types": 1,

    "consistent-return": 1,
    "no-param-reassign": 0,
    "react/display-name": 0,
    "no-use-before-define": 0,
    "no-underscore-dangle": 0,
    "react/button-has-type": 1,
    "react/no-children-prop": 0,
    "react/forbid-prop-types": 0,
    "jsx-a11y/anchor-is-valid": 0,
    "react/react-in-jsx-scope": 0,
    "react/no-array-index-key": 0,
    "react/no-unused-prop-types": 1,
    "react/require-default-props": 0,
    "react/no-unescaped-entities": 0,
    "import/prefer-default-export": 0,
    "react/jsx-props-no-spreading": 0,
    "react/jsx-filename-extension": 0,
    "react/destructuring-assignment": 0,
    "import/no-extraneous-dependencies": 0,
    "react/jsx-key": 1,
    "react-hooks/rules-of-hooks": 2,
    "camelcase": 0,
    "no-unused-vars": [
      1,
      {
        "ignoreRestSiblings": false
      }
    ],

    "no-nested-ternary": 0,
    "no-unneeded-ternary": 0,
    "prefer-destructuring": 0,
    "prefer-template": 0,
    "no-undef": "error",
    "dot-notation": 0,
    "object-shorthand": 0,
    "no-lone-blocks": 0,
    "no-else-return": 0,
    "no-debugger": 0,
    "no-plusplus": 0,
    "arrow-body-style": 0,
    "react/function-component-definition": 0,
    "react/no-unstable-nested-components": 0,
    "prefer-arrow-callback": 0,

    "react/jsx-boolean-value": 0,
    "react/jsx-curly-brace-presence": 0,
    "react/jsx-uses-react": 0,
    "react/jsx-no-duplicate-props": 0,
    "jsx-a11y/label-has-associated-control": 0,
    "no-useless-return": 0,
    "prefer-rest-params": 0,
    "no-unsafe-optional-chaining": 0,
    "no-prototype-builtins": 0,
    "react/self-closing-comp": 0,
    "no-await-in-loop": 0,

    "react/no-unknown-property": 0,

    "import/no-mutable-exports": 0,
    "import/no-named-as-default-member": 0,
    "import/no-named-as-default": 0,
    "no-inner-declarations": 0
  }
}
